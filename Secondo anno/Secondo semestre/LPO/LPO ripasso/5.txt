public class PairImp<T1, T2> implements Pair<T1, T2> {

	public final T1 first;
	public final T2 second;

	public PairImp(T1 first, T2 second) {
		this.first = requireNonNull(first);
		this.second = requireNonNull(second);
	}

	public T1 getFirst() {
		return first;
	}

	public T2 getSecond() {
		return second;
	}

	@Override
	public String toString() {
		return "(" + first + "," + second + ")";
	}
}

public class Zipper<T1, T2> implements Iterator<Pair<T1, T2>> {

	private final Iterator<T1> iterator1;
	private final Iterator<T2> iterator2;

	public Zipper(Iterable<T1> iterable1, Iterable<T2> iterable2) {
		iterator1 = iterable1.iterator();
		iterator2 = iterable2.iterator();
	}

	@Override
	public boolean hasNext() {
		return iterator1.hasNext() && iterator2.hasNext();
	}

	@Override
	public Pair<T1, T2> next() {
		if (!hasNext())
			throw new NoSuchElementException();
		return new PairImp<>(iterator1.next(), iterator2.next());
	}

}
